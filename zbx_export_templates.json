{
    "zabbix_export": {
        "version": "5.2",
        "date": "2021-06-08T10:14:49Z",
        "groups": [
            {
                "name": "Templates/Modules"
            }
        ],
        "templates": [
            {
                "template": "SSL and TLS certificate",
                "name": "SSL and TLS certificate",
                "description": "It's a custom template by Ihor Romanyshyn based on https://github.com/selivan/https-ssl-cert-check-zabbix script. The script must be placed at the ExternalScripts directory defined in the zabbix_server.conf file.",
                "groups": [
                    {
                        "name": "Templates/Modules"
                    }
                ],
                "applications": [
                    {
                        "name": "SSL and TLS"
                    }
                ],
                "items": [
                    {
                        "name": "Certificate expire",
                        "type": "EXTERNAL",
                        "key": "ssl_cert_check.sh[\"expire\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"]",
                        "value_type": "FLOAT",
                        "units": "days",
                        "applications": [
                            {
                                "name": "SSL and TLS"
                            }
                        ],
                        "triggers": [
                            {
                                "expression": "({change()}>1)\nand\n({prev()}<>-65535)",
                                "name": "The certificate has been replaced on {HOST.NAME} (service {$SSL_PORT})",
                                "priority": "INFO",
                                "description": "The certificate for the domain appears to be replaced because its validity date changed.",
                                "manual_close": "YES"
                            },
                            {
                                "expression": "({last()}<7)\nand\n({last()}>=0)",
                                "recovery_mode": "RECOVERY_EXPRESSION",
                                "recovery_expression": "{last()}>7",
                                "name": "The certificate on {HOST.NAME} (service {$SSL_PORT}) expires in less than 7 days",
                                "priority": "AVERAGE",
                                "description": "{ITEM.LASTVALUE1} to expire",
                                "dependencies": [
                                    {
                                        "name": "Failed to get certificate at {HOST.NAME} (service {$SSL_PORT})",
                                        "expression": "({SSL and TLS certificate:ssl_cert_check.sh[\"expire\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].max(10m)}=-65535)\nor\n({SSL and TLS certificate:ssl_cert_check.sh[\"valid\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].max(10m)}=-65535)"
                                    },
                                    {
                                        "name": "The certificate on {HOSTNAME} (service {$SSL_PORT}) is expired",
                                        "expression": "({SSL and TLS certificate:ssl_cert_check.sh[\"expire\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].last()}<=0)\nand\n({SSL and TLS certificate:ssl_cert_check.sh[\"expire\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].last()}>-65535)",
                                        "recovery_expression": "({SSL and TLS certificate:ssl_cert_check.sh[\"expire\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].last()}>0)"
                                    }
                                ]
                            },
                            {
                                "expression": "({last()}<{$SSL_DAYS})\nand\n({last()}>=0)",
                                "recovery_mode": "RECOVERY_EXPRESSION",
                                "recovery_expression": "{last()}>{$SSL_DAYS}",
                                "name": "The certificate on {HOSTNAME} (service {$SSL_PORT}) expires in less than {$SSL_DAYS} days",
                                "priority": "WARNING",
                                "description": "{ITEM.LASTVALUE1} to expire",
                                "dependencies": [
                                    {
                                        "name": "Failed to get certificate at {HOST.NAME} (service {$SSL_PORT})",
                                        "expression": "({SSL and TLS certificate:ssl_cert_check.sh[\"expire\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].max(10m)}=-65535)\nor\n({SSL and TLS certificate:ssl_cert_check.sh[\"valid\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].max(10m)}=-65535)"
                                    },
                                    {
                                        "name": "The certificate on {HOST.NAME} (service {$SSL_PORT}) expires in less than 7 days",
                                        "expression": "({SSL and TLS certificate:ssl_cert_check.sh[\"expire\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].last()}<7)\nand\n({SSL and TLS certificate:ssl_cert_check.sh[\"expire\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].last()}>=0)",
                                        "recovery_expression": "{SSL and TLS certificate:ssl_cert_check.sh[\"expire\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].last()}>7"
                                    }
                                ]
                            },
                            {
                                "expression": "({last()}<=0)\nand\n({last()}>-65535)",
                                "recovery_mode": "RECOVERY_EXPRESSION",
                                "recovery_expression": "({last()}>0)",
                                "name": "The certificate on {HOSTNAME} (service {$SSL_PORT}) is expired",
                                "priority": "HIGH",
                                "description": "{ITEM.LASTVALUE1}",
                                "dependencies": [
                                    {
                                        "name": "Failed to get certificate at {HOST.NAME} (service {$SSL_PORT})",
                                        "expression": "({SSL and TLS certificate:ssl_cert_check.sh[\"expire\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].max(10m)}=-65535)\nor\n({SSL and TLS certificate:ssl_cert_check.sh[\"valid\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].max(10m)}=-65535)"
                                    },
                                    {
                                        "name": "The certificate on {HOSTNAME} (service {$SSL_PORT}) is invalid",
                                        "expression": "{SSL and TLS certificate:ssl_cert_check.sh[\"valid\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].last()}=0",
                                        "recovery_expression": "{SSL and TLS certificate:ssl_cert_check.sh[\"valid\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].last()}=1"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "Certificate validity",
                        "type": "EXTERNAL",
                        "key": "ssl_cert_check.sh[\"valid\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"]",
                        "value_type": "FLOAT",
                        "applications": [
                            {
                                "name": "SSL and TLS"
                            }
                        ],
                        "valuemap": {
                            "name": "SSL and TLS cert validity"
                        },
                        "triggers": [
                            {
                                "expression": "{last()}=0",
                                "recovery_mode": "RECOVERY_EXPRESSION",
                                "recovery_expression": "{last()}=1",
                                "name": "The certificate on {HOSTNAME} (service {$SSL_PORT}) is invalid",
                                "priority": "HIGH",
                                "description": "The certificate appears to be revoked, self-signed, or improperly installed. Anyway, it can't be trusted.",
                                "dependencies": [
                                    {
                                        "name": "Failed to get certificate at {HOST.NAME} (service {$SSL_PORT})",
                                        "expression": "({SSL and TLS certificate:ssl_cert_check.sh[\"expire\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].max(10m)}=-65535)\nor\n({SSL and TLS certificate:ssl_cert_check.sh[\"valid\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].max(10m)}=-65535)"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "macros": [
                    {
                        "macro": "{$SSL_DAYS}",
                        "value": "21",
                        "description": "When to trigger an alarm, but there's also a trigger on 7 days left predefined."
                    },
                    {
                        "macro": "{$SSL_PORT}",
                        "value": "443",
                        "description": "Default port 443 is for HTTPS service with SSL. But the next protocols currently supported for TLS also: \"smtp\", \"pop3\", \"imap\", \"ftp\", \"xmpp\", \"xmpp-server\", \"irc\", \"postgres\", \"mysql\", \"lmtp\", \"nntp\", \"sieve\" and \"ldap\". To check the TLS protocol, use it like this: \"636/ldap\". Also, \"8443/tls\" may work."
                    }
                ],
                "dashboards": [
                    {
                        "name": "SSL Dashboard",
                        "widgets": [
                            {
                                "type": "GRAPH_CLASSIC",
                                "width": "24",
                                "height": "6",
                                "fields": [
                                    {
                                        "type": "GRAPH",
                                        "name": "graphid",
                                        "value": {
                                            "name": "Certificate status",
                                            "host": "SSL and TLS certificate"
                                        }
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ],
        "triggers": [
            {
                "expression": "({SSL and TLS certificate:ssl_cert_check.sh[\"expire\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].max(10m)}=-65535)\nor\n({SSL and TLS certificate:ssl_cert_check.sh[\"valid\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"].max(10m)}=-65535)",
                "name": "Failed to get certificate at {HOST.NAME} (service {$SSL_PORT})",
                "priority": "WARNING"
            }
        ],
        "graphs": [
            {
                "name": "Certificate status",
                "graph_items": [
                    {
                        "sortorder": "1",
                        "color": "E64A19",
                        "calc_fnc": "ALL",
                        "item": {
                            "host": "SSL and TLS certificate",
                            "key": "ssl_cert_check.sh[\"expire\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"]"
                        }
                    },
                    {
                        "sortorder": "2",
                        "drawtype": "FILLED_REGION",
                        "color": "4CAF50",
                        "yaxisside": "RIGHT",
                        "calc_fnc": "ALL",
                        "item": {
                            "host": "SSL and TLS certificate",
                            "key": "ssl_cert_check.sh[\"valid\",\"{HOST.CONN}\",\"{$SSL_PORT}\",\"{HOST.DNS}\"]"
                        }
                    }
                ]
            }
        ],
        "value_maps": [
            {
                "name": "SSL and TLS cert validity",
                "mappings": [
                    {
                        "value": "-65535",
                        "newvalue": "failed"
                    },
                    {
                        "value": "0",
                        "newvalue": "invalid"
                    },
                    {
                        "value": "1",
                        "newvalue": "valid"
                    }
                ]
            }
        ]
    }
}